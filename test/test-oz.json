{
  "OccupancySensor": {
    "name": "OccupancySensor",
    "manufacturer": "Generic",
    "model": "OccupancySensor",
    "services": [
      {
        "name": "OccupancySensor",
        "service": "OccupancySensor",
        "topic": {
          "statusOccupancyDetected": "OccupancySensor/status",
          "statusLowBattery": "OccupancySensor/status/LowBattery",
          "statusActive": "OccupancySensor/status/Active",
          "statusFault": "OccupancySensor/status/Fault",
          "statusTampered": "OccupancySensor/status/Tampered"
        },
        "payload": {
          "onOccupancyDetected": 1,
          "onLowBattery": 1,
          "onActive": 1,
          "onFault": 1,
          "onTampered": 1
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "Outlet": {
    "name": "Outlet",
    "manufacturer": "Generic",
    "model": "Outlet",
    "services": [
      {
        "name": "Outlet",
        "service": "Outlet",
        "topic": {
          "statusOn": "Outlet/status",
          "setOn": "Outlet/set",
          "statusOutletInUse": "Outlet/status/OutletInUse",
          "setOutletInUse": "Outlet/set/OutletInUse"
        },
        "payload": {
          "onTrue": 1,
          "onFalse": 0,
          "onOutletInUse": 1
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "SecuritySystem": {
    "name": "SecuritySystem",
    "services": [
      {
        "name": "SecuritySystem",
        "service": "SecuritySystem",
        "topic": {
          "setSecuritySystemTargetState": "SecuritySystem/set/TargetState",
          "statusSecuritySystemCurrentState": "SecuritySystem/status/CurrentState",
          "statusFault": "SecuritySystem/status/Fault",
          "statusTampered": "SecuritySystem/status/Tampered"
        },
        "payload": {
          "onFault": 1,
          "onTampered": 1
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "Slat": {
    "name": "Slat",
    "services": [
      {
        "name": "Slat",
        "service": "Slat",
        "topic": {
          "statusCurrentSlatState": "Slat/status",
          "statusCurrentTiltAngle": "Slat/status/CurrentTiltAngle",
          "statusTargetTiltAngle": "Slat/status/TargetTiltAngle",
          "setTargetTiltAngle": "Slat/set/TargetTiltAngle",
          "statusSwingMode": "Slat/status/SwingMode",
          "setSwingMode": "Slat/set/SwingMode"
        },
        "payload": {},
        "config": {},
        "props": {}
      }
    ]
  },
  "SmokeSensor": {
    "name": "SmokeSensor",
    "manufacturer": "Generic",
    "model": "SmokeSensor",
    "services": [
      {
        "name": "SmokeSensor",
        "service": "SmokeSensor",
        "topic": {
          "statusSmokeDetected": "SmokeSensor/status",
          "statusLowBattery": "SmokeSensor/status/LowBattery",
          "statusActive": "SmokeSensor/status/Active",
          "statusFault": "SmokeSensor/status/Fault",
          "statusTampered": "SmokeSensor/status/Tampered"
        },
        "payload": {
          "onSmokeDetected": 1,
          "onLowBattery": 1,
          "onActive": 1,
          "onFault": 1,
          "onTampered": 1
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "StatelessProgrammableSwitch": {
    "name": "StatelessProgrammableSwitch",
    "manufacturer": "Generic",
    "model": "StatelessProgrammableSwitch",
    "serial": "7890",
    "services": [
      {
        "name": "StatelessProgrammableSwitch",
        "service": "StatelessProgrammableSwitch",
        "topic": {
          "statusEvent": "StatelessProgrammableSwitch/status"
        },
        "payload": {},
        "config": {},
        "props": {}
      }
    ]
  },
  "Speaker": {
    "name": "Speaker",
    "serial": "12345",
    "services": [
      {
        "name": "Speaker",
        "service": "Speaker",
        "topic": {
          "setMute": "Speaker/set/Mute",
          "statusMute": "Speaker/status/Mute",
          "setVolume": "Speaker/set/Volume",
          "statusVolume": "Speaker/status/Volume"
        },
        "payload": {
          "muteTrue": true,
          "muteFalse": false
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "Switch": {
    "name": "Switch1",
    "manufacturer": "Generic",
    "model": "Switch",
    "services": [
      {
        "name": "Switch1",
        "service": "Switch",
        "topic": {
          "statusOn": "Switch/status",
          "setOn": "Switch/set"
        },
        "payload": {
          "onTrue": 1,
          "onFalse": 0
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "TemperatureSensor": {
    "name": "TemperatureSensor",
    "manufacturer": "Generic",
    "services": [
      {
        "name": "TemperatureSensor",
        "service": "TemperatureSensor",
        "topic": {
          "statusTemperature": "TemperatureSensor/Temperature",
          "statusLowBattery": "TemperatureSensor/status/LowBattery",
          "statusActive": "TemperatureSensor/status/Active",
          "statusFault": "TemperatureSensor/status/Fault",
          "statusTampered": "TemperatureSensor/status/Tampered"
        },
        "payload": {
          "onLowBattery": 1,
          "onActive": 1,
          "onFault": 1,
          "onTampered": 1
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "TemperatureSensorF": {
    "name": "TemperatureSensorF",
    "model": "TemperatureSensor",
    "services": [
      {
        "name": "TemperatureSensorF",
        "service": "TemperatureSensor",
        "topic": {
          "statusTemperature": "TemperatureSensorF/Temperature"
        },
        "payload": {
          "fahrenheit": true
        },
        "config": {},
        "props": {
          "CurrentTemperature": {
            "minValue": -50
          }
        }
      }
    ]
  },
  "Thermostat": {
    "name": "Thermostat",
    "manufacturer": "Generic",
    "serial": "912341",
    "services": [
      {
        "name": "Thermostat",
        "service": "Thermostat",
        "topic": {
          "setTargetTemperature": "Thermostat/set/TargetTemperature",
          "statusTargetTemperature": "Thermostat/status/TargetTemperature",
          "setTargetHeatingCoolingState": "Thermostat/set/TargetHeatingCoolingState",
          "statusTargetHeatingCoolingState": "Thermostat/status/TargetHeatingCoolingState",
          "setCurrentHeatingCoolingState": "Thermostat/set/CurrentHeatingCoolingState",
          "statusCurrentHeatingCoolingState": "Thermostat/status/CurrentHeatingCoolingState",
          "statusCurrentTemperature": "Thermostat/status/CurrentTemperature",
          "setCurrentRelativeHumidity": "Thermostat/set/CurrentRelativeHumidity",
          "statusCurrentRelativeHumidity": "Thermostat/status/CurrentRelativeHumidity",
          "statusTargetRelativeHumidity": "Thermostat/status/TargetRelativeHumidity",
          "setTargetRelativeHumidity": "Thermostat/set/TargetRelativeHumidity",
          "statusHeatingThresholdTemperature": "Thermostat/status/HeatingThresholdTemperature",
          "setHeatingThresholdTemperature": "Thermostat/set/HeatingThresholdTemperature",
          "statusCoolingThresholdTemperature": "Thermostat/status/CoolingThresholdTemperature",
          "setCoolingThresholdTemperature": "Thermostat/set/CoolingThresholdTemperature"
        },
        "payload": {},
        "config": {
          "TemperatureDisplayUnits": 0
        },
        "props": {}
      }
    ]
  },
  "ThermostatSimple": {
    "name": "ThermostatSimple",
    "manufacturer": "Generic",
    "serial": "912343",
    "services": [
      {
        "name": "ThermostatSimple",
        "service": "Thermostat",
        "topic": {
          "setTargetTemperature": "ThermostatSimple/set/TargetTemperature",
          "statusTargetTemperature": "ThermostatSimple/status/TargetTemperature",
          "setCurrentTemperature": "ThermostatSimple/set/CurrentTemperature",
          "statusCurrentTemperature": "ThermostatSimple/status/CurrentTemperature"
        },
        "payload": {},
        "config": {},
        "props": {}
      }
    ]
  },
  "Valve": {
    "name": "Valve",
    "services": [
      {
        "name": "Valve",
        "service": "Valve",
        "topic": {
          "setActive": "Valve/set",
          "statusActive": "Valve/status",
          "setDuration": "Valve/set/Duration",
          "statusInUse": "Valve/status/InUse",
          "statusRemainingDuration": "Valve/status/RemainingDuration",
          "statusFault": "Valve/status/Fault"
        },
        "payload": {
          "inUseTrue": 1,
          "faultTrue": 1,
          "activeTrue": 1,
          "activeFalse": 0
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "Window": {
    "name": "Window",
    "services": [
      {
        "name": "Window",
        "service": "Window",
        "topic": {
          "setTargetPosition": "Window/set/TargetPosition",
          "statusTargetPosition": "Window/status/TargetPosition",
          "statusCurrentPosition": "Window/status/CurrentPosition",
          "statusPositionState": "Window/status/PositionState",
          "statusObstruction": "Window/status/Obstruction"
        },
        "payload": {
          "onObstructionDetected": 1,
          "positionStatusIncreasing": 1,
          "positionStatusDecreasing": 2
        },
        "config": {},
        "props": {}
      }
    ]
  },
  "WindowCovering": {
    "name": "WindowCovering",
    "serial": "1239431",
    "model": "WindowCovering",
    "services": [
      {
        "name": "WindowCovering",
        "service": "WindowCovering",
        "topic": {
          "setTargetPosition": "WindowCovering/set/TargetPosition",
          "statusTargetPosition": "WindowCovering/status/TargetPosition",
          "statusCurrentPosition": "WindowCovering/status/CurrentPosition",
          "statusPositionState": "WindowCovering/status/PositionState"
        },
        "payload": {
          "targetPositionFactor": 0.01,
          "currentPositionFactor": 0.01,
          "positionStatusIncreasing": 1,
          "positionStatusDecreasing": 2
        },
        "config": {},
        "props": {}
      }
    ]
  }
}